# Modern KRY Component System Example
# Demonstrates @component, @props, @slots, and @lifecycle directives

@metadata {
    title: "Modern Component System Demo"
    version: "2.0.0"
    windowWidth: 1000
    windowHeight: 700
}

@variables {
    theme: "dark"
    appName: "Component Demo"
}

# Basic Button Component
@component Button {
    @props {
        text: String = "Click me"
        variant: "primary" | "secondary" | "danger" = "primary"
        size: "sm" | "md" | "lg" = "md"
        disabled: Boolean = false
        onClick?: (event: Event) => void
        # Computed properties
        buttonClass: "btn btn-${variant} btn-${size}"
        isClickable: !$disabled && $onClick != null
        ariaLabel: $text + ($disabled ? " (disabled)" : "")
    }
    
    Button {
        text: $text
        class: $buttonClass
        disabled: $disabled
        onClick: $isClickable ? $onClick : null
        ariaLabel: $ariaLabel
    }
}

# Card Component with Slots
@component Card {
    @props {
        title: String = "Card Title"
        variant: "default" | "bordered" | "elevated" = "default"
        width: Number = 300
        # Computed properties
        cardClass: "card card-${variant}"
        hasContent: $slots.default != null
    }
    
    @slots {
        default: "Main card content"
        header?: "Custom header content"
        footer?: "Card action buttons"
    }
    
    Container {
        class: $cardClass
        width: $width
        padding: 16
        
        @if $slots.header {
            Container {
                class: "card-header"
                marginBottom: 12
                @slot header
            }
        } @else {
            Text {
                text: $title
                class: "card-title"
                fontSize: 18
                fontWeight: 600
                marginBottom: 12
            }
        }
        
        @if $hasContent {
            Container {
                class: "card-body"
                @slot default
            }
        }
        
        @if $slots.footer {
            Container {
                class: "card-footer"
                marginTop: 12
                borderTop: "1px solid #e0e0e0"
                paddingTop: 12
                @slot footer
            }
        }
    }
}

# Data Table Component with Lifecycle
@component DataTable {
    @props {
        data: Array = []
        columns: Array = []
        pageSize: Number = 10
        currentPage: Number = 0
        loading: Boolean = false
        # Computed properties
        totalPages: Math.ceil(($data.length || 0) / $pageSize)
        startIndex: $currentPage * $pageSize
        endIndex: Math.min($startIndex + $pageSize, $data.length || 0)
        currentPageData: $data.slice($startIndex, $endIndex)
        hasData: $data && $data.length > 0
        hasPrevPage: $currentPage > 0
        hasNextPage: $currentPage < $totalPages - 1
    }
    
    @lifecycle {
        onMount: () => {
            console.log("DataTable mounted with", $data.length, "items")
            setupTableEvents()
        }
        onUpdate: (prevProps) => {
            if (prevProps.data !== $data) {
                console.log("Data updated:", $data.length, "items")
            }
        }
        onUnmount: () => {
            cleanupTableEvents()
        }
    }
    
    Container {
        class: "data-table"
        
        @if $loading {
            Container {
                class: "loading-spinner"
                Text { text: "Loading..." }
            }
        } @elif $hasData {
            # Table header
            Container {
                class: "table-header"
                display: "flex"
                
                @for column in $columns {
                    Text {
                        text: $column.title
                        class: "table-header-cell"
                        width: $column.width || "auto"
                    }
                }
            }
            
            # Table rows
            Container {
                class: "table-body"
                
                @for row in $currentPageData {
                    Container {
                        class: "table-row"
                        display: "flex"
                        
                        @for column in $columns {
                            Text {
                                text: $row[$column.key] || "-"
                                class: "table-cell"
                                width: $column.width || "auto"
                            }
                        }
                    }
                }
            }
            
            # Pagination
            Container {
                class: "pagination"
                display: "flex"
                justifyContent: "space-between"
                alignItems: "center"
                marginTop: 16
                
                Button {
                    text: "Previous"
                    variant: "secondary"
                    disabled: !$hasPrevPage
                    onClick: "prevPage"
                }
                
                Text {
                    text: "Page ${$currentPage + 1} of ${$totalPages}"
                    class: "page-info"
                }
                
                Button {
                    text: "Next"
                    variant: "secondary" 
                    disabled: !$hasNextPage
                    onClick: "nextPage"
                }
            }
        } @else {
            Container {
                class: "empty-state"
                textAlign: "center"
                padding: 40
                
                Text {
                    text: "No data available"
                    fontSize: 16
                    color: "#666"
                }
                
                Button {
                    text: "Load Data"
                    variant: "primary"
                    onClick: "loadData"
                    marginTop: 16
                }
            }
        }
    }
}

# App Layout using components
Container {
    class: "app-container"
    padding: 20
    
    Text {
        text: $appName
        fontSize: 24
        fontWeight: 700
        marginBottom: 20
    }
    
    # Button examples
    Container {
        class: "button-showcase"
        display: "flex"
        gap: 10
        marginBottom: 20
        
        Button {
            text: "Primary"
            variant: "primary"
            onClick: "handlePrimary"
        }
        
        Button {
            text: "Secondary"
            variant: "secondary"
            size: "lg"
            onClick: "handleSecondary"
        }
        
        Button {
            text: "Disabled"
            variant: "danger"
            disabled: true
        }
    }
    
    # Card examples
    Container {
        class: "card-showcase"
        display: "flex"
        gap: 20
        marginBottom: 20
        
        Card {
            title: "Basic Card"
            variant: "bordered"
            
            Text { text: "This is a basic card with default content." }
            Text { text: "Cards are great for organizing content." }
        }
        
        Card {
            title: "Card with Footer"
            variant: "elevated"
            width: 350
            
            Text { text: "This card has custom footer actions." }
            
            @slot footer {
                Container {
                    display: "flex"
                    gap: 10
                    
                    Button {
                        text: "Cancel"
                        variant: "secondary"
                        size: "sm"
                    }
                    
                    Button {
                        text: "Save"
                        variant: "primary"
                        size: "sm"
                    }
                }
            }
        }
    }
    
    # Data table example
    DataTable {
        data: [
            { name: "John Doe", age: 30, role: "Developer" },
            { name: "Jane Smith", age: 25, role: "Designer" },
            { name: "Bob Johnson", age: 35, role: "Manager" }
        ]
        columns: [
            { key: "name", title: "Name", width: "200px" },
            { key: "age", title: "Age", width: "100px" },
            { key: "role", title: "Role", width: "150px" }
        ]
        pageSize: 2
    }
}

@function "lua" handlePrimary() {
    print("Primary button clicked!")
}

@function "lua" handleSecondary() {
    print("Secondary button clicked!")
}

@function "lua" prevPage() {
    print("Previous page")
}

@function "lua" nextPage() {
    print("Next page")
}

@function "lua" loadData() {
    print("Loading data...")
}

@function "lua" setupTableEvents() {
    print("Setting up table event listeners")
}

@function "lua" cleanupTableEvents() {
    print("Cleaning up table event listeners")
}