/**
 * @file ast_expander.h
 * @brief AST expansion interface for components and const_for loops
 */

#ifndef KRYON_AST_EXPANDER_H
#define KRYON_AST_EXPANDER_H

#include "codegen.h"
#include "parser.h"
#include <stdint.h>
#include <stdbool.h>

/**
 * @brief Find component definition in AST
 * @param component_name Name of component to find
 * @param ast_root Root of AST to search in
 * @return Component definition node or NULL if not found
 */
KryonASTNode *kryon_find_component_definition(const char *component_name, 
                                              const KryonASTNode *ast_root);

/**
 * @brief Expand component instance by substituting parameters
 * @param component_instance Component instance to expand
 * @param ast_root Root of AST for component definition lookup
 * @return Expanded component body or NULL on failure
 */
KryonASTNode *kryon_expand_component_instance(const KryonASTNode *component_instance, 
                                              const KryonASTNode *ast_root);

/**
 * @brief Expand const_for loop by unrolling iterations
 * @param codegen Code generator context
 * @param const_for Const_for loop node to expand
 * @param ast_root Root of AST for constant lookups
 * @return true on success
 */
bool kryon_expand_const_for_loop(KryonCodeGenerator *codegen, 
                                 const KryonASTNode *const_for, 
                                 const KryonASTNode *ast_root);

/**
 * @brief Count elements that will be generated by const_for loop
 * @param codegen Code generator context
 * @param const_for Const_for loop node to analyze
 * @return Number of elements that will be generated
 */
uint32_t kryon_count_const_for_elements(KryonCodeGenerator *codegen, 
                                        const KryonASTNode *const_for);

/**
 * @brief Substitute template variables in AST nodes
 * @param node The AST node to process
 * @param var_name The variable name to substitute (e.g., "alignment")
 * @param var_value The variable value (object literal with properties)
 * @return New AST node with substituted values
 */
KryonASTNode *kryon_substitute_template_vars(const KryonASTNode *node, const char *var_name, const KryonASTNode *var_value);

#endif // KRYON_AST_EXPANDER_H